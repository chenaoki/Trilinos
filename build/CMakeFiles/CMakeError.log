Performing C++ SOURCE FILE Test HAVE_TEUCHOS_LAPACKLARND failed with the following output:
Change Dir: /home/tomii/simenv/trilinos/build/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec1031564769/fast"
/usr/bin/make -f CMakeFiles/cmTryCompileExec1031564769.dir/build.make CMakeFiles/cmTryCompileExec1031564769.dir/build
make[1]: ディレクトリ `/home/tomii/simenv/trilinos/build/CMakeFiles/CMakeTmp' に入ります
/usr/bin/cmake -E cmake_progress_report /home/tomii/simenv/trilinos/build/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec1031564769.dir/src.cxx.o
/usr/bin/mpicxx    -std=c++11 -DHAVE_TEUCHOS_LAPACKLARND   -o CMakeFiles/cmTryCompileExec1031564769.dir/src.cxx.o -c /home/tomii/simenv/trilinos/build/CMakeFiles/CMakeTmp/src.cxx
/home/tomii/simenv/trilinos/build/CMakeFiles/CMakeTmp/src.cxx: In function ‘int main()’:
/home/tomii/simenv/trilinos/build/CMakeFiles/CMakeTmp/src.cxx:12:38: warning: narrowing conversion of ‘0.0’ from ‘double’ to ‘int’ inside { } [-Wnarrowing]
   int seed[4] = { 0.0, 0.0, 0.0, 1.0 };
                                      ^
/home/tomii/simenv/trilinos/build/CMakeFiles/CMakeTmp/src.cxx:12:38: warning: narrowing conversion of ‘0.0’ from ‘double’ to ‘int’ inside { } [-Wnarrowing]
/home/tomii/simenv/trilinos/build/CMakeFiles/CMakeTmp/src.cxx:12:38: warning: narrowing conversion of ‘0.0’ from ‘double’ to ‘int’ inside { } [-Wnarrowing]
/home/tomii/simenv/trilinos/build/CMakeFiles/CMakeTmp/src.cxx:12:38: warning: narrowing conversion of ‘1.0e+0’ from ‘double’ to ‘int’ inside { } [-Wnarrowing]
Linking CXX executable cmTryCompileExec1031564769
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec1031564769.dir/link.txt --verbose=1
/usr/bin/mpicxx    -std=c++11 -DHAVE_TEUCHOS_LAPACKLARND    CMakeFiles/cmTryCompileExec1031564769.dir/src.cxx.o  -o cmTryCompileExec1031564769 -rdynamic -llapack 
CMakeFiles/cmTryCompileExec1031564769.dir/src.cxx.o: 関数 `main' 内:
src.cxx:(.text+0x3a): `dlarnd_' に対する定義されていない参照です
collect2: error: ld returned 1 exit status
make[1]: *** [cmTryCompileExec1031564769] エラー 1
make[1]: ディレクトリ `/home/tomii/simenv/trilinos/build/CMakeFiles/CMakeTmp' から出ます
make: *** [cmTryCompileExec1031564769/fast] エラー 2

Return value: 1
Source file was:

#define F77_BLAS_MANGLE(name,NAME) name ## _

#define DLARND_F77   F77_BLAS_MANGLE(dlarnd,DLARND)

extern "C" { double DLARND_F77(const int* idist, int* seed); }

int main()
{

  const int idist = 1;
  int seed[4] = { 0.0, 0.0, 0.0, 1.0 };

  double val = DLARND_F77(&idist, seed);

  return (val < 0.0 ? 1 : 0);

}
  
Performing C++ SOURCE FILE Test HAVE_CXX_PRAGMA_WEAK failed with the following output:
Change Dir: /home/tomii/simenv/trilinos/build/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec765655437/fast"
/usr/bin/make -f CMakeFiles/cmTryCompileExec765655437.dir/build.make CMakeFiles/cmTryCompileExec765655437.dir/build
make[1]: ディレクトリ `/home/tomii/simenv/trilinos/build/CMakeFiles/CMakeTmp' に入ります
/usr/bin/cmake -E cmake_progress_report /home/tomii/simenv/trilinos/build/CMakeFiles/CMakeTmp/CMakeFiles 1
Building CXX object CMakeFiles/cmTryCompileExec765655437.dir/src.cxx.o
/usr/bin/mpicxx    -std=c++11 -DHAVE_CXX_PRAGMA_WEAK   -o CMakeFiles/cmTryCompileExec765655437.dir/src.cxx.o -c /home/tomii/simenv/trilinos/build/CMakeFiles/CMakeTmp/src.cxx
Linking CXX executable cmTryCompileExec765655437
/usr/bin/cmake -E cmake_link_script CMakeFiles/cmTryCompileExec765655437.dir/link.txt --verbose=1
/usr/bin/mpicxx    -std=c++11 -DHAVE_CXX_PRAGMA_WEAK    CMakeFiles/cmTryCompileExec765655437.dir/src.cxx.o  -o cmTryCompileExec765655437 -rdynamic 
CMakeFiles/cmTryCompileExec765655437.dir/src.cxx.o: 関数 `main' 内:
src.cxx:(.text+0x21): `A::theFunction()' に対する定義されていない参照です
collect2: error: ld returned 1 exit status
make[1]: *** [cmTryCompileExec765655437] エラー 1
make[1]: ディレクトリ `/home/tomii/simenv/trilinos/build/CMakeFiles/CMakeTmp' から出ます
make: *** [cmTryCompileExec765655437/fast] エラー 2

Source file was:

#include <iostream>

namespace A {
// theFunction never gets defined, because we
// don't link with a library that defines it.
// That's OK, because it's weak linkage.
#pragma weak theFunction
extern void theFunction ();
}

int main() {
  std::cout << "Hi!  I am main." << std::endl;
  if (A::theFunction != NULL) {
    // Should never be called, since we don't link
    // with a library that defines A::theFunction.
    A::theFunction ();
  }
  return 0;
}
  
